# GraphQL schema example
#
# https://gqlgen.com/getting-started/

type StudentInfo {
   error:Boolean!    #   ! used for required fields
  message:String!
  roll_no: Int!
  name: String!
  dept: String!
  year: Int!
  mob_no: Int!
  email: String!
  dob: Int!
  address: Address!
}

type Address{
  error:Boolean!
  message:String!
  roll_no: Int!
  city: String!
  district: String!
  pin: Int!
  state: String!
}

type Marks{
  error:Boolean!
  message:String!
  roll_no: Int!
  physics: Int!
  chemistry: Int!
  mathematics: Int!
}
type Join{
  error:Boolean!
  message:String!
  roll_no: Int!
  name:String!
  dept:String!
  email:String!
  city: String!
  district: String!
  pin: Int!
  state: String!
  physics: Int!
  chemistry: Int!
  mathematics: Int!
}

type Query {
  students: [StudentInfo!]!     # here [] is for we return array of user
  student(roll_no: Int!): StudentInfo   # here we are returning single user using roll_no and int as a parameter
  username(name: String): [StudentInfo] # here we are returning single user using name and [] is there can be multiple user with the same name
}

input NewStudent {
 roll_no: Int!
  name: String!
  dept: String!
  year: Int!
  mob_no: Int!
  email: String!
  dob: Int!
}
input UpdateStudent {
 roll_no: Int!
  name: String!
  dept: String!
  year: Int!
  mob_no: Int!
  email: String!
  dob: Int!
}
input DeleteStudent {
  roll_no: Int!
}
input AddAddress{
  roll_no: Int!
  city: String!
  district: String!
  pin: Int!
  state: String!
}
input AddMarks{
  roll_no: Int!
  physics: Int!
  chemistry: Int!
  mathematics: Int!
}

type Mutation {
  createStudent(input: NewStudent): StudentInfo!
  updateStudent(input: UpdateStudent!): StudentInfo!
  removeStudent(input: DeleteStudent!): String!
  FetchStudent:[StudentInfo!]!
  AddAddress(input:AddAddress):Address!
  FetchAddress:[Address!]!
  AddMarks(input:AddMarks):Marks!
  FetchMarks:[Marks!]!
  JoinStudent:[Join!]!
}
